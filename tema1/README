task 1: am luat numarul meu si l-am shiftat in dreapta cu 29 de pozitii pentru a afla numarul de operanzi(n). Dupa ce am aflat n-ul am facut o copie pe care am shiftat-o cu 3 pozitii in dreapta. In for am shitat cu 30 de poztii in dreapta pt a afla valoare operanzilor, o afisam cu un subprogram, si dupa shiftam copia numarului cu doua pozitii in dreapta pt a trece la urmatorul operand. La final am printat cpynr shitat cu 28 de pozitii la stanga, deoarece contine doar dim in el dupa ce l-am shitat in forul de mai sus( cu 3 + (2*n))

task 2: am calulat valoarea ceruta si am facut %16. Daca era diferit de 1 adunam +1 la numarul de citire si daca era 0 inseamna ca era int, deci era ok. Dupa am facut in for in care citeam numarele, si altul in care am shiftat pe fiecare numar. Cel de al doilea for shifteaza numarul citit cu dim in dreapta si dupa shitez cu 16 - dim la stanga pentru a afla numarul corespunzator secventei dim. Fac asta de 16/dim ori(in functie de i-ul meu pt numarul corespunzator), deoarece imi trebuie atatea numere. Conditia k!=(int)n este conditia de oprire, in caz ca sunt mai multe numere decat n+1 (k pleaca de la -1 pt a putea initializa suma, si din aceasta cauza am facut convertirea n-ului). Dupa, in for, am comparat fiecare valoare din vectorul de operanzi si conform valorii contorului k am facut fiecare operatie in cadrul lui sum(suma finala);

task 3: in cadrul acestui task am luat toate numerele pe care le-am citit si le-am trasnpus intr-un vector binar(v). In acest se aflta doar 0 si 1 care reprezinta bitii(cu ajutorul subprogramului afisare_bin). Dupa, in urmatorul for, am apelat un subprogram care are rolul de a lua din vectoru v dim biti si sa-i transpuna in decimal. Acesta este numarul care imi trebuie. k are rolul de a imi delimita valorie care trebuie sa le extrag binar din vector, iar cont este u contor care are rolul de am ma ajuta sa fac operatiile in functie de vetorul v_opr. Sum este valoarea finala.

task 4: de la taskul 3 am luat nrcautate si le-am bagat intr-un vector numa v_dim, unde se afla toate numerele care imi trebuie in functie de dimensiunea lor. Dupa, in urmatorul for, m-am uitat in vecorul de operanzi(v_opr), si am verificat daca este inmultire sau impartire. Daca gaseam, initializam un alt for care are rolul sa faca toate inmultirile si impartirile pana ajung la adunare sau scadere. In vectorul de numere, in loc de numerele inmultite si impartite pun 0. In urmatorul for ma uit in v_dim sa vad care numere sunt 0, si care nu sunt le adun sau le scad la sum. If-ul dinaintea vectorului are rolul de a vedea ce se inampla cu primul numar (daca trebuie inmultit/impartit cu altul sau poate sa fie initializat sum cu acesta in caz contrar).
